source("http://bioconductor.org/biocLite.R")
biocLite(c("GenomicFeatures", "AnnotationDbi"))
library(ggplot2)
install.packages("slidify")
install.packages("Rtools")
library("devtools", lib.loc="C:/Users/Dana/Documents/R/win-library/3.0")
find_rtools()
detach("package:devtools", unload=TRUE)
library("devtools", lib.loc="C:/Users/Dana/Documents/R/win-library/3.0")
install.packages("slidify")
find_rtools()
library("devtools", lib.loc="C:/Users/Dana/Documents/R/win-library/3.0")
find_rtools
find_rtools()
find_rtools()
install.packages("Rtools")
library("ggplot2", lib.loc="C:/Users/Dana/Documents/R/win-library/3.0")
library("devtools", lib.loc="C:/Users/Dana/Documents/R/win-library/3.0")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("GenomicFeatures")
library(ggplot2)
library(devtools)
library("GenomicFeatures", lib.loc="C:/Users/Dana/Documents/R/win-library/3.0")
search()
find.package("devtools")
library(devtools)
find_rtools()
setwd("D:/DataScience/datasharing/ProgrammingAssignment2")
dir()
m
i
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
cacheSolve
cacheSolve()
cacheSolve(x <- matrix(1:2,1:2))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(c(1, 2, 3))
print(makeVector(c(1, 2, 3)))
a <- makeVector(1:7)
cachemean(a)
makeCacheMatrix(1:3, 1:3)
foo <- matrix(1:4,2,2)
solve(foo)
m <- makeCacheMatrix(1:2, 2, 2)
m <- makeCacheMatrix(1:2,2,2)
m <- makeCacheMatrix(1:2,1:2)
m <- matrix(1:5)
m
makeCacheMatrix(1:2)
a <- makeCacheMatrix(1:2)
a
solve(a)
mat <- matrix(2, 3, 3, 2)
x <- makeCacheMatrix(mat)
cacheSolve(x)
mat <- matrix(2, 3, 3, -2)
x <- makeCacheMatrix(mat)
solve(x)
cacheSolve(x)
mat <- matrix(1,2,3,4)
mat
mat <- matrix(1:9, 3, 3)
mat
x <- makeCacheMatrix(mat)
cacheSolve(x)
mat(2,1,-1,2,-1,2,3,1,1, 3,3)
mat <- matrix(2,1,-1,2,-1,2,3,1,1, 3,3)
mat <- matrix(c(2,1,-1,2,-1,2,3,1,1),3 ,3)
mat
x <- makeCacheMatrix(mat)
cacheSolve(x)
p <- matrix(11:14, 2, 2)
pp <- makeCacheMatrix(p)
cacheSolve(pp)
s<-matrix(21:24,2 , 2)
ss<-makeCacheMatrix(s)
ss$setinverse(solve(s)) #here i am storing the inverse in the cache
ss$getinverse() # here i am just getting it to see if the inverse is there for sure
cacheSolve(ss) # here i find the inverse but the data is already in the cache
q()
